package converter_db;

import converter_db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table CONVERSION_ENTITY.
 */
public class ConversionEntity {

    private Long id;
    private Long currency_id;
    private Integer position;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ConversionEntityDao myDao;

    private CurrencyEntity currency_code;
    private Long currency_code__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ConversionEntity() {
    }

    public ConversionEntity(Long id) {
        this.id = id;
    }

    public ConversionEntity(Long id, Long currency_id, Integer position) {
        this.id = id;
        this.currency_id = currency_id;
        this.position = position;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getConversionEntityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getCurrency_id() {
        return currency_id;
    }

    public void setCurrency_id(Long currency_id) {
        this.currency_id = currency_id;
    }

    public Integer getPosition() {
        return position;
    }

    public void setPosition(Integer position) {
        this.position = position;
    }

    /** To-one relationship, resolved on first access. */
    public CurrencyEntity getCurrency_code() {
        Long __key = this.currency_id;
        if (currency_code__resolvedKey == null || !currency_code__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CurrencyEntityDao targetDao = daoSession.getCurrencyEntityDao();
            CurrencyEntity currency_codeNew = targetDao.load(__key);
            synchronized (this) {
                currency_code = currency_codeNew;
            	currency_code__resolvedKey = __key;
            }
        }
        return currency_code;
    }

    public void setCurrency_code(CurrencyEntity currency_code) {
        synchronized (this) {
            this.currency_code = currency_code;
            currency_id = currency_code == null ? null : currency_code.getNumericCode();
            currency_code__resolvedKey = currency_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
