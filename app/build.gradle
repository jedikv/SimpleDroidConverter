apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.getkeepsafe.dexcount'
apply from: '../jacoco.gradle'


def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))


// Manifest version information!
def versionMajor = 0
def versionMinor = 1
def versionPatch = 0

//def versionBuild = 1 // bump for dogfood builds, public betas, etc.

//Build variables
def BOOLEAN = "boolean"
def STRING = "String"
def TRUE = "true"
def FALSE = "false"
def GIT_SHA = "GIT_SHA"
def BUILD_TIME = "BUILD_TIME"
def LOG_HTTP_REQUESTS = "LOG_HTTP_REQUESTS"
def CRASH_REPORTING = "CRASH_REPORTING"


android {
    compileSdkVersion 23
    buildToolsVersion '23.0.1'

    defaultConfig {
        applicationId "com.jedikv.simpleconverter"
        minSdkVersion 14
        targetSdkVersion 23

        // for espresso tests
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'


        versionCode versionMajor * 100 + versionMinor * 10 + versionPatch //+ versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"


        buildConfigField STRING, GIT_SHA, "\"${gitSha}\""
        buildConfigField STRING, BUILD_TIME, "\"${buildTime}\""
        buildConfigField BOOLEAN, LOG_HTTP_REQUESTS, TRUE
        buildConfigField BOOLEAN, CRASH_REPORTING, FALSE
    }
    buildTypes {
        release {
            debuggable false
            zipAlignEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField BOOLEAN, LOG_HTTP_REQUESTS, FALSE

        }

        debug {
            versionNameSuffix '-dev'
            minifyEnabled false
            zipAlignEnabled true
            debuggable true
            testCoverageEnabled = true
            buildConfigField BOOLEAN, LOG_HTTP_REQUESTS, TRUE

        }

        sourceSets {
            main {
                java.srcDirs = ['src/main/java', 'src/main/dao-generated']
            }


            /*
            unitTest {
                java.srcDir file('androidTest')
                resources.srcDir file('androidTest/resources')
            }
            */

        }


    }


    lintOptions {
        abortOnError false
    }

    dexcount {
        includeClasses = true
        includeFieldCount = true
        printAsTree = true
        orderByMethodCount = true
        verbose = false
    }

    testOptions {
        unitTests.all {
           // jvmArgs '-XX:MaxPermSize=256m' //Or any other
        }
        unitTests.returnDefaultValues = true

    }

    compileOptions {
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}


// Running the APK on your Android Device
android.applicationVariants.all { variant ->
    if (variant.install) {
        tasks.create(name: "run${variant.name.capitalize()}", type: Exec,
                dependsOn: variant.install) {
            group = 'Run'
            description "Installs and Runs the APK for ${variant.description}."
            def getMainActivity = { file ->
                new XmlSlurper().parse(file).application.activity.find {
                    it.'intent-filter'.find { filter ->
                        return filter.action.find {
                            it.'@android:name'.text() == 'android.intent.action.MAIN'
                        } \
                             && filter.category.find {
                            it.'@android:name'.text() == 'android.intent.category.LAUNCHER'
                        }
                    }
                }.'@android:name'
            }
            doFirst {
                def activityClass =
                        getMainActivity(variant.outputs.processManifest.manifestOutputFile)
                commandLine android.adbExe, 'shell', 'am', 'start', '-n',
                        "${variant.applicationId}/${activityClass}"

                // or without the XML hacking: commandLine android.adbExe, 'shell', 'monkey', '-p', variant.applicationId, '1'
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //Android support libraries
    compile 'com.android.support:appcompat-v7:23.0.1'
    compile 'com.android.support:cardview-v7:23.0.1'
    compile 'com.android.support:recyclerview-v7:23.0.1'
    compile 'com.android.support:design:23.0.1'
    androidTestCompile 'com.android.support:support-annotations:23.0.1'
    compile 'com.nineoldandroids:library:2.4.0'
    //Butterknife
    compile 'com.jakewharton:butterknife:7.0.1'
    //Otto Event bus
    compile 'com.squareup:otto:1.3.8'
    //Gson JSON parser
    compile 'com.google.code.gson:gson:2.3.1'
    //Dagger 2.0
    compile 'com.google.dagger:dagger:2.0.1'
    compile 'com.google.dagger:dagger-compiler:2.0.1'
    provided 'org.glassfish:javax.annotation:10.0-b28'
    //Greendao ORM database
    compile 'de.greenrobot:greendao:2.0.0'
    //Date4J date parser
    compile 'com.darwinsys:hirondelle-date4j:1.5.1'
    //Timber logging library
    compile 'com.jakewharton.timber:timber:3.1.0'
    //Icepick
    compile 'com.github.frankiesardo:icepick-processor:2.3.6'
    compile 'com.github.frankiesardo:icepick:2.3.6'
    //Okhttp & Retrofit
    compile 'com.squareup.okhttp:okhttp:2.5.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.5.0'
    //RxAndroid
    compile 'io.reactivex:rxjava:1.0.14'
    compile 'io.reactivex:rxandroid:1.0.1'
    //compile 'io.reactivex:rxandroid:0.24.0'
    compile 'net.danlew:android.joda:2.8.1'
    //Open source acknowledgements
    compile('com.mikepenz:aboutlibraries:5.0.9@aar') {
        transitive = true
    }
    //Leaky Canary for memory leak detection
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
    //Stetho is a debug bridge for Android applications via chrome
    compile 'com.facebook.stetho:stetho:1.2.0'
    //Testing

    // Espresso Instrumentation Testing
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2'
    //androidTestCompile 'com.android.support.test:testing-support-lib:0.1'
    androidTestCompile 'com.android.support.test:runner:0.3'
    //Dependency to use Junit4 rules
    androidTestCompile 'com.android.support.test:rules:0.3'
    //Hamcrest matcching
    androidTestCompile 'org.hamcrest:hamcrest-library:1.1'
    // Fixes for Linux and Mac
    testCompile 'org.apache.maven:maven-ant-tasks:2.1.3'
    // Junit
    testCompile 'junit:junit:4.12'
    // Hamcrest Matchers for Junit
    //testCompile 'org.hamcrest:hamcrest-integration:1.3'
    testCompile 'org.hamcrest:hamcrest-all:1.3'

    // Mockito
    testCompile 'org.mockito:mockito-core:1.10.19'
    // EasyMock
    testCompile 'org.easymock:easymock:3.3.1'
    // PowerMock
    testCompile 'org.powermock:powermock-core:1.6.2'
    testCompile 'org.powermock:powermock-module-junit4:1.6.2'
    // PowerMock + EasyMock extension
    testCompile 'org.powermock:powermock-api-easymock:1.6.2'
    //Fest
    testCompile 'org.easytesting:fest:1.0.16'
    androidTestCompile 'com.squareup.assertj:assertj-android:1.1.0'




    // Robolectric + Support v4
    testCompile('org.robolectric:robolectric:3.0') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
}

// JaCoCo Test Reports, thanks to Nenick
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebug']) {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running tests.'

    reports {
        xml {
            enabled true // coveralls
            html.enabled true
            destination "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        }

        html {
            enabled true
            destination "${project.buildDir}/reports/jacoco/test/html"
        }
    }

    // use hidden configuration, for details look into JacocoPlugin.groovy
    jacocoClasspath = project.configurations['androidJacocoAnt']

    // exclude auto-generated classes and tests
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*',
                      'android/**/*.*']
    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec'])
}