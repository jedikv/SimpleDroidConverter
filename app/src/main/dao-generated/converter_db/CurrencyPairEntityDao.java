package converter_db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import converter_db.CurrencyPairEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CURRENCY_PAIR_ENTITY.
*/
public class CurrencyPairEntityDao extends AbstractDao<CurrencyPairEntity, Long> {

    public static final String TABLENAME = "CURRENCY_PAIR_ENTITY";

    /**
     * Properties of entity CurrencyPairEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Pair = new Property(0, String.class, "pair", false, "PAIR");
        public final static Property Id = new Property(1, Long.class, "id", true, "_id");
        public final static Property Created_date = new Property(2, java.util.Date.class, "created_date", false, "CREATED_DATE");
        public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
        public final static Property Rate = new Property(4, Integer.class, "rate", false, "RATE");
    };


    public CurrencyPairEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CurrencyPairEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CURRENCY_PAIR_ENTITY' (" + //
                "'PAIR' TEXT NOT NULL UNIQUE ," + // 0: pair
                "'_id' INTEGER PRIMARY KEY ," + // 1: id
                "'CREATED_DATE' INTEGER," + // 2: created_date
                "'DATE' INTEGER," + // 3: date
                "'RATE' INTEGER);"); // 4: rate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CURRENCY_PAIR_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CurrencyPairEntity entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getPair());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        java.util.Date created_date = entity.getCreated_date();
        if (created_date != null) {
            stmt.bindLong(3, created_date.getTime());
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date.getTime());
        }
 
        Integer rate = entity.getRate();
        if (rate != null) {
            stmt.bindLong(5, rate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public CurrencyPairEntity readEntity(Cursor cursor, int offset) {
        CurrencyPairEntity entity = new CurrencyPairEntity( //
            cursor.getString(offset + 0), // pair
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // created_date
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // date
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // rate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CurrencyPairEntity entity, int offset) {
        entity.setPair(cursor.getString(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCreated_date(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setRate(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CurrencyPairEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CurrencyPairEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
