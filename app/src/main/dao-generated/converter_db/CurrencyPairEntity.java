package converter_db;

import converter_db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "CURRENCY_PAIR_ENTITY".
 */
public class CurrencyPairEntity {

    private Long id;
    private java.util.Date created_date;
    private java.util.Date last_updated;
    private long source_currency;
    private long target_currency;
    private Integer rate;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CurrencyPairEntityDao myDao;

    private CurrencyEntity source_id;
    private Long source_id__resolvedKey;

    private CurrencyEntity target_id;
    private Long target_id__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public CurrencyPairEntity() {
    }

    public CurrencyPairEntity(Long id) {
        this.id = id;
    }

    public CurrencyPairEntity(Long id, java.util.Date created_date, java.util.Date last_updated, long source_currency, long target_currency, Integer rate) {
        this.id = id;
        this.created_date = created_date;
        this.last_updated = last_updated;
        this.source_currency = source_currency;
        this.target_currency = target_currency;
        this.rate = rate;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCurrencyPairEntityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getCreated_date() {
        return created_date;
    }

    public void setCreated_date(java.util.Date created_date) {
        this.created_date = created_date;
    }

    public java.util.Date getLast_updated() {
        return last_updated;
    }

    public void setLast_updated(java.util.Date last_updated) {
        this.last_updated = last_updated;
    }

    public long getSource_currency() {
        return source_currency;
    }

    public void setSource_currency(long source_currency) {
        this.source_currency = source_currency;
    }

    public long getTarget_currency() {
        return target_currency;
    }

    public void setTarget_currency(long target_currency) {
        this.target_currency = target_currency;
    }

    public Integer getRate() {
        return rate;
    }

    public void setRate(Integer rate) {
        this.rate = rate;
    }

    /** To-one relationship, resolved on first access. */
    public CurrencyEntity getSource_id() {
        long __key = this.source_currency;
        if (source_id__resolvedKey == null || !source_id__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CurrencyEntityDao targetDao = daoSession.getCurrencyEntityDao();
            CurrencyEntity source_idNew = targetDao.load(__key);
            synchronized (this) {
                source_id = source_idNew;
            	source_id__resolvedKey = __key;
            }
        }
        return source_id;
    }

    public void setSource_id(CurrencyEntity source_id) {
        if (source_id == null) {
            throw new DaoException("To-one property 'source_currency' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.source_id = source_id;
            source_currency = source_id.getNumericCode();
            source_id__resolvedKey = source_currency;
        }
    }

    /** To-one relationship, resolved on first access. */
    public CurrencyEntity getTarget_id() {
        long __key = this.target_currency;
        if (target_id__resolvedKey == null || !target_id__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CurrencyEntityDao targetDao = daoSession.getCurrencyEntityDao();
            CurrencyEntity target_idNew = targetDao.load(__key);
            synchronized (this) {
                target_id = target_idNew;
            	target_id__resolvedKey = __key;
            }
        }
        return target_id;
    }

    public void setTarget_id(CurrencyEntity target_id) {
        if (target_id == null) {
            throw new DaoException("To-one property 'target_currency' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.target_id = target_id;
            target_currency = target_id.getNumericCode();
            target_id__resolvedKey = target_currency;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
